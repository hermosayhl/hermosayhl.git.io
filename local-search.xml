<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/01/11/hello-world/"/>
    <url>/2020/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>排序(1) 桶排序</title>
    <link href="/2019/11/25/%E6%8E%92%E5%BA%8F-1-%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/11/25/%E6%8E%92%E5%BA%8F-1-%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>说起排序算法，我最先想到的就是桶排序了，《啊哈算法》上的第一个算法，当初学习时，顿感神奇！这种直接定位到下标的技术(哈希)在日后更是常见，用的好可以降低一个级别的时间复杂度。<br>当时，我已了解到的排序算法如冒泡排序、插入排序、选择排序，快速排序等，都有一个明显比较大小的过程，但是桶排序没有，桶排序直接定位到它应该在哪里，然后…</p><p><img src="/.io//16-26-24.jpg" srcset="/img/loading.gif" alt><br>就没有然后了，一眼望去，排好了。<br>后续接触，才发现《啊哈算法》上讲的桶排序其实是桶范围 = 1的特殊情况（称“计数排序”），其他情况还是需要比较的过程的，但是我还是把书上讲的当作真的桶排序，谁让我对它那么熟悉呢，哈哈。<br>正文开始。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一堆数字，排序</p><h2 id="桶排序过程："><a href="#桶排序过程：" class="headerlink" title="桶排序过程："></a>桶排序过程：</h2><p>以下过程并非严格的“桶排序”，只是按照《啊哈算法》上的内容设计<br><img src="/.io//21-35-44.jpg" srcset="/img/loading.gif" alt><br>第一个数字 2， 放到坐标为 2 的桶上，<br><img src="/.io//21-44-03.jpg" srcset="/img/loading.gif" alt><br>第二个数 7，放到坐标为 7 的桶上，<br><img src="/.io//21-44-19.jpg" srcset="/img/loading.gif" alt><br>第三个数 1，放到坐标为 1 的桶上，<br><img src="/.io//21-44-40.jpg" srcset="/img/loading.gif" alt><br>.<br>.<br>.<br>若干次 “放” 之后，<br><img src="/.io//21-45-53.jpg" srcset="/img/loading.gif" alt><br>接下来就是“一眼望去”，扫描一遍，即可得到结果：<br>    0 1 2 2 2 3 4 4 4 5 6 7<br>第一次看到这个排序，我就惊了！ 这么巧妙！原理很简单，就是根据数本身，放到下标为数本身的桶里，再扫描一遍即可得到排序之后的结果。<br>虽然原理很简单，但是代码实现还是有一些需要注意的问题，例如负数 -3 不能放到下标为 -3 的桶，因为数组坐标必须 &gt;= 0，所以区间需要偏移，等等。<br>主要操作： 定位 + 一眼望去</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code class="CPP">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;limits.h&gt;#define INF INT_MAX#define EMPTY 0// 打印一个 int 数组，arr 数组指针，L 数组长度void display_array(int *arr, const int L) {    int i = 0;    for (i = 0; i &lt; L; ++i)        printf(&quot;%d &quot;, arr[i]);    printf(&quot;\n&quot;);}// 输入一个数组, 返回数组首地址int *get_array(const int L) {    int i = 0;    int *arr = (int *)malloc(L * sizeof(int));    for (i = 0; i &lt; L; ++i)        scanf(&quot;%d&quot;, &amp;arr[i]);    return arr;}// 释放数组 arrvoid free_array(int *arr) {    if (arr != NULL) {        free(arr);        arr = NULL;        printf(&quot;\nallocated memory is free&quot;);    }}// 从一个 int 数组中找出最小值和最大值, arr 数组地址, _min 最小值地址, _max 最大值地址void get_min_max(int *arr, const int L, int *_min, int *_max) {    int i = 0;    for (i = 0; i &lt; L; ++i) {        if (*_min &gt; arr[i]) *_min = arr[i];        else if (*_max &lt; arr[i]) *_max = arr[i];    }}// 桶排序, arr 数组指针, L 数组长度void bucket_sort(int *arr, const int L) {    // 先找出所有数的范围区间，例如所有数都处在 [-3, 7] 之间    int _min = INF, _max = -INF, i = 0;    get_min_max(arr, L, &amp;_min, &amp;_max);    // 根据区间大小, 摆好恰好足够的桶, 如果 [-3, 7] 就需要 11 个桶    int bucket_size = _max - _min + 1;    int bucket[bucket_size];    for (i = 0; i &lt; bucket_size; ++i) // 所有桶一开始都是空的        bucket[i] = EMPTY;    // 开始放到桶里，注意将区间偏移到 [0, ] 以 0 开始    for (i = 0; i &lt; L; ++i)        ++bucket[arr[i] - _min];      // arr[i] - _min 偏移，例如 -3 偏移到 0, 7 偏移到 10    int cnt = 0, j = 0;    // 开始扫描所有桶    for (i = 0; i &lt; bucket_size; ++i)        // 桶不是空的        if (bucket[i] != EMPTY)            // 这个桶里有多少个数，全部填充到数组中            for (j = 0; j &lt; bucket[i]; ++j) {                arr[cnt++] = i + _min;                // cnt 记录当前，从桶中看到了多少个数，cnt 最终一定是 L            }}int main() {    const int L = 12;    int *arr = get_array(L);    bucket_sort(arr, L);    display_array(arr, L);    free_array(arr);    return 0;}</code></pre><h1 id="扩大桶的“管理”范围"><a href="#扩大桶的“管理”范围" class="headerlink" title="扩大桶的“管理”范围"></a>扩大桶的“管理”范围</h1><p>以上内容都是基于《啊哈算法》设计的。真正的桶排序，原理与上面类似，但是桶的“管理范围”更大，例如：<br>桶的管理范围是 10<br><img src="/.io//23-09-28.jpg" srcset="/img/loading.gif" alt><br>桶排序之后：<br><img src="/.io//23-12-11.jpg" srcset="/img/loading.gif" alt><br>同样很简单！将数字映射到 10 的整数倍的桶中，然后每个桶有桶内的排序，这个桶内排序可以任意选，冒泡、插入… 和之前的差别就是在，每个桶里可以放多个不一样的。<br>三个主要操作：定位 + 桶内排序 + 一眼望去<br>代码<strong>主要代码</strong>修改如下，略显复杂，<strong>若接受不了可直接跳过</strong>，直接复杂度分析。</p><pre><code class="C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;limits.h&gt;#define INF INT_MAX#define EMPTY 0                              // 桶是否为空#define BIG_DATA 1e4                         // 数据规模大的分水岭，大于则用快速排序，小于用冒泡排序#define _range 10                            // 每个桶的管辖范围是 10 ，例如 [20, 29]#define _swap(a, b) {tmp = a; a = b; b = tmp;}typedef int (*map_type)(const int);          // 映射函数类型，函数指针typedef void (*sort_type)(int *, const int); // 排序函数类型, 函数指针，参数：数组指针，数组长度// 打印一个 int 数组，arr 数组指针，L 数组长度void display_array(int *arr, const int L) {    int i = 0;    for (i = 0; i &lt; L; ++i)        printf(&quot;%d &quot;, arr[i]);    printf(&quot;\n&quot;);}// 输入一个数组, 返回数组首地址int *get_array(const int L) {    int i = 0;    int *arr = (int *)malloc(L * sizeof(int));    for (i = 0; i &lt; L; ++i)        scanf(&quot;%d&quot;, &amp;arr[i]);    return arr;}// 释放数组 arrvoid free_array(int *arr) {    if (arr != NULL) {        free(arr);        arr = NULL;    }}// 从一个 int 数组中找出最小值和最大值, 返回映射后的区间长度// arr 数组地址, L 数组长度, _min 起始地址指针int get_min_max(int *arr, const int L, int *_min, map_type _map) {    int _max = -INF, i = 0;    for (i = 0; i &lt; L; ++i) {        if (*_min &gt; arr[i]) *_min = arr[i];        else if (_max &lt; arr[i]) _max = arr[i];    }    return _map(_max - *_min) + 1;}// 映射函数, 桶的管辖范围是 10, 例如 3, 5 都被分到 0 号桶, 35 被分到 3 号桶int map_function(const int data) {    return data / _range;}// 冒泡排序void bubble_sort(int *arr, const int L) {    int i = 0, j = 0, tmp = 0;    for (i = 0; i &lt; L - 1; ++i)        for (j = 0; j &lt; L - i - 1; ++j)            if (arr[j] &gt; arr[j + 1])                _swap(arr[j], arr[j + 1]);}// 快速排序，暂未写到这里，暂时空着void quick_sort(int *arr, const int L) {}// 桶排序, arr 数组指针, L 数组长度void bucket_sort(int *arr, const int L, map_type _map, sort_type inner_sort[]) {    int i = 0, init_addr = INF;    // 求区间大小, 传入 &amp;init_addr 得到区间起始地址    const int bucket_size = get_min_max(arr, L, &amp;init_addr, _map);    // bucket_count 统计每个桶内的数字个数    int bucket_count[bucket_size];    for (i = 0; i &lt; bucket_size; ++i)        bucket_count[i] = EMPTY;    for (i = 0; i &lt; L; ++i)        ++bucket_count[_map(arr[i] - init_addr)];    // bucket 二维数组，但是“残缺”的二维数组；C 语言没有 vector，所以略嫌麻烦    int *bucket[bucket_size];    for (i = 0; i &lt; bucket_size; ++i){        // 如果下标为 i 的桶内有数字，就分配 bucket_count 个 int 的内存        if (bucket_count[i] != EMPTY)            bucket[i] = (int *)malloc(bucket_count[i] * sizeof(int));        else            bucket[i] = NULL;    }    // now[i] 累计坐标 i 的桶内现在放了多少个数字了，初始化为 0    int now[bucket_size];    for (i = 0; i &lt; bucket_size; ++i)        now[i] = 0;    for (int i = 0; i &lt; L; ++i) {        int index = _map(arr[i] - init_addr);        if (bucket[index] != NULL)            bucket[index][now[index]++] = arr[i];    }    // 开始对每个桶内进行排序    for (int i = 0; i &lt; bucket_size; ++i) {        if (bucket[i] != NULL) {            // 桶内排序，数据规模太大用快速排序，数据规模小用冒泡排序；可自己修改            if(bucket_count[i] &gt; BIG_DATA)                inner_sort[1](bucket[i], bucket_count[i]);            else inner_sort[0](bucket[i], bucket_count[i]);        }    }    // 一眼望去，将所有桶的数据装入 arr, 每个桶都通过 inner_sort 排好序了    int cnt = 0, j = 0;    for (i = 0; i &lt; bucket_size; ++i)        if (bucket[i] != NULL)            for (j = 0; j &lt; now[i]; ++j)                arr[cnt++] = bucket[i][j];    // 千万别忘记释放桶动态申请的内存    for(i = 0;i &lt; bucket_size; ++i)        free_array(bucket[i]);}int main() {    const int L = 12;    int *arr = get_array(L);    sort_type sort_functions[2] = {bubble_sort, quick_sort};    // 采用映射函数 map_function 定位到具体某个桶，桶内采用 sort_functions 排序函数组    bucket_sort(arr, L, map_function, sort_functions);    display_array(arr, L);    free_array(arr);    return 0;}</code></pre><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h2 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1. 时间复杂度"></a>1. 时间复杂度</h2><p>最早接触时间复杂度就是从冒泡排序开始的，两层循环嘛，每一层都是 N 级别的，所以时间复杂度是O(N * N)。<br>桶排序分为三个步骤，定位 + 桶内排序 + 一眼望去。<br>(1) 定位操作一般是O(1)，每个数据都要定位一次，时间复杂度O(N)，N 是数据规模，如果数据是字符串则需另算字符串平均长度。<br>(2)桶内也需要排序，可以是任何一种排序（桶排序也可以，就是别递归了），一般所有桶的排序算法一致，也可以不一样——桶内数据规模太大的可以选归并排序和堆排序、快速排序这些，桶内数据稀疏的可以选冒泡排序这些，桶排序的稳定性也由选择的排序算法决定。<br>假设桶内排序算法采用快速排序：<br>数据规模 N，共 K 个桶，平均每个桶 N / K 个数据，每个桶内快速排序的时间复杂度就是 (N / K)log2(N / K)，共 K 个桶的时间复杂度就是 K * (N / K)log2(N / K) = Nlog2(N / K)——当 N ≈ K 时，时间复杂度 O(N) ! </p><!-- # $ O(log_2{3}) $ --><p>其他桶内排序算法计算时间复杂度与上面类似。<br>(3)一眼望去，扫描所有桶，时间复杂度 O(K)，K 是桶的个数。<br>所以桶排序的时间复杂度是 O(N) + O(桶内排序算法的复杂度) + O(K)，N 是数据个数，K 是桶的个数。</p><blockquote><p>《啊哈算法》书上介绍的就是桶管理范围为 1 的情况，此时桶内都是同一个数据，不需要桶内排序，时间复杂度平均下来 O(N + K)；最好的情况 N &gt;&gt; K，数据很集中，时间复杂度 ≈ O(N) ，竟然有 O(N) 的排序算法，可惜有限制条件——桶范围 1，N &gt;&gt; K；最差的情况，数据不集中，空间浪费多，接下来，空间复杂度分析，</p></blockquote><h2 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2. 空间复杂度"></a>2. 空间复杂度</h2><p>若干个和 bucket_size 有关的数组，数据规模 K<br>如果最终数组存储在临时数组中，数据规模为 N，使用一个大小为 N 的数组，空间复杂度是 O(N)，故空间复杂度是 O(N + K)<br>如果最终数组存储在原数组中（如代码），则空间复杂度只有 O(K)</p><h1 id="缺点与注意点"><a href="#缺点与注意点" class="headerlink" title="缺点与注意点"></a>缺点与注意点</h1><h2 id="1-存在空间浪费"><a href="#1-存在空间浪费" class="headerlink" title="1. 存在空间浪费"></a>1. 存在空间浪费</h2><p>很明显，桶排序需要构建于某个区间内，如果数据分布不集中，区间长度多达百万、千万，但排序的数据个数很少（几十几百），扫描了太多的空桶，但其实这些桶是不必要遍历的，那么桶排序就失去了它的优势。根本原因就是数组的下标的连续递增性，导致了必须存储这些不必要的桶。如下，总共两个数字，但是需要的桶……<br><img src="/.io//10-29-27.jpg" srcset="/img/loading.gif" alt><br>难道数组下标还能不连续递增吗？数组下标当然是连续递增的了。但是 C++ 中，有 map、unordered_map 的存在，它们实现了：<br><img src="/.io//09-59-24.jpg" srcset="/img/loading.gif" alt><br>arr 并不是数组，但它却具有类似下标访问的性质，重要的是，它的下标可以不连续啊！就不存在浪费的桶。怎么做到的？ 请搜索 <strong>C++ 重载[]操作符</strong>。</p><h2 id="2-可能不稳定"><a href="#2-可能不稳定" class="headerlink" title="2. 可能不稳定"></a>2. 可能不稳定</h2><p>这涉及到<strong>排序稳定性</strong>的概念（深入请搜索），通俗来说，两个一样的数字，在排好序之后的序列中相对前后位置不变，举个例子：<br><img src="/.io//10-18-11.jpg" srcset="/img/loading.gif" alt><br>根据年龄排序，结果，刘畅依旧排在钟某前面。<br>概念很简单。<br>桶排序是稳定排序吗？<br>当 bucket_size 桶大小为 1，只能容纳一个数字，那么桶排序是稳定排序，因为同一个数字的桶中，不存在排序，顺序读就已经排好序了<br>当 bucket_size 桶达小 &gt; 1，可以容纳多个数字，那么桶内的排序算法就决定了桶排序的稳定性——如果桶内排序是稳定的，比如冒泡，那么这时的桶排序就是稳定的；如果桶内排序是快速排序，那么此时桶排序就是不稳定的。</p><h2 id="3-数据类型的变化"><a href="#3-数据类型的变化" class="headerlink" title="3. 数据类型的变化"></a>3. 数据类型的变化</h2><p>由上可知，int 数据比较适合桶排序排序。字符串，甚至其他数据类型都可能可以用桶排序排序，只要改变映射函数，能实现字符串到下标的映射，即可；桶内函数组也能对字符串排序即可。</p><h2 id="4-不方便对结构体排序"><a href="#4-不方便对结构体排序" class="headerlink" title="4. 不方便对结构体排序"></a>4. 不方便对结构体排序</h2><p>由于桶排序首先的操作就是哈希，定位在哪个桶；而其他排序算法都有直接比较的过程，对结构体排序，只需要重载 &lt; 操作符，或者书写比较函数 cmp 即可。<br>对于结构体排序这个问题来说，桶排序多了一个定位的操作，需要定义映射函数，作为比较函数的参数（映射利用了坐标的特性，排了序）；还需要定义桶内排序函数……有点复杂，这也许是标准库中没有加入桶排序的原因吧，哈哈。</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="1-动态内存"><a href="#1-动态内存" class="headerlink" title="1. 动态内存"></a>1. 动态内存</h2><p>为什么要选择 malloc 申请动态数组？ C 语言中，直接声明的数组是存储在栈的，栈的内存也就若干 MB，存储能力有限，但现实工程中面临的排序操作可能是几百万甚至几亿的数据，比如 google 搜索，从海量数据中筛选出前 100 个排好序的候选网页，排序数据不可能存储在栈，为了程序后续面临的压力测试，数据最好存储在堆，也就是动态申请的数组中。<br>至于 free 操作，动态申请的内存当然要释放了。内存释放问题大吗？平常我写程序没有 free 也没有任何问题，但是工程应用中没有 free 意味着内存泄漏，意味着内存浪费，也意味着服务器“越来越满”，一满就无法继续服务，必须通过重启等强制措施让操作系统来回收这些内存，服务器一停……很多相应服务都要中断，损失并不小。<br>但是内存真的每次都能正常释放吗？<br><img src="/.io//09-36-27.jpg" srcset="/img/loading.gif" alt><br>如图，在动态申请内存和释放内存之间有这两个子函数，如果其中有个函数崩溃了（你懂的，越界之类的），那么程序直接结束！ 不会再执行 free_array 操作，意味着内存泄露！<br>那面对这种突发情况怎么处理呢？请搜索 <strong>RAII</strong> 或者 <strong>Scopeguard</strong>，深入学习还可以搜索 <strong>“异常安全”</strong> ，这些概念对于培养良好的编程思维颇有益处，对我来说影响很大。</p><h1 id="性能测评"><a href="#性能测评" class="headerlink" title="性能测评"></a>性能测评</h1><p>见后续排序 总结，敬请期待。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>这从一个数(也可以是其他数据)，直接映射到某个位置上的操作，是哈希。哈希在解决很多问题上能提供O(1)的定位操作，大大降低时间复杂度，但同时也是一种空间换时间的做法。<br>尽管桶排序的作者并不是从哈希出发的，抑或是根本没有作者，这么简单，很多人都能想到，只是像我这样的菜鸡一直陷在“如何比较大小”这个圈里，没有跳出来。后来当我了解到一些特殊二叉树（如线段树，treap，Splay等），每次搜索第 1 小数，搜索N次，就排好序了，平均时间复杂度O(NlogN)，实在感叹灵感的重要性。<br>之后在和一些同学交流时，我发现他们根本就不知道“桶排序”这个东西，心里有点失望；上网一查，八大排序算法竟然没有桶排序一席之地……<br>桶排序算是对我的算法启蒙，它让我感觉到了算法的神奇之处，简单而强大，包括之后学习的并查集、树状数组等等……我有必要对它进行一次整理。<br>虽然我已经大四了，但当我回顾这些知识，它们依旧是那么有趣。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
      <tag>哈希</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
